import requests
import json

url = "https://movie-database-api1.p.rapidapi.com/list_movies.json"

querystring = {
    "limit": "50",
    "page": "1",
    "quality": "all",
    "genre": "all",
    "minimum_rating": "0",
    "query_term": "0",
    "sort_by": "date_added",
    "order_by": "desc",
    "with_rt_ratings": "false"
}

headers = {
    "x-rapidapi-key": "64acfa5bc8msh47699c6231ab51cp1e607ejsn584b29027eba",
    "x-rapidapi-host": "movie-database-api1.p.rapidapi.com"
}

response = requests.get(url, headers=headers, params=querystring)
data = response.json()

if "data" in data and "movies" in data["data"]:
    movies = data["data"]["movies"]

    for i, movie in enumerate(movies, 1):
        print("=" * 100)
        print(f"–§–∏–ª—å–º ‚Ññ{i}")
        print("=" * 100)
        print(f"ID: {movie.get('id')}")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {movie.get('title')}")
        print(f"–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {movie.get('title_long')}")
        print(f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {movie.get('year')}")
        print(f"–†–µ–π—Ç–∏–Ω–≥: {movie.get('rating')}")
        print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {movie.get('runtime')} –º–∏–Ω—É—Ç")
        print(f"–ñ–∞–Ω—Ä—ã: {', '.join(movie.get('genres', []))}")
        print(f"–Ø–∑—ã–∫: {movie.get('language')}")
        print(f"IMDB: https://www.imdb.com/title/{movie.get('imdb_code')}")
        print(f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–π–ª–µ—Ä: https://www.youtube.com/watch?v={movie.get('yt_trailer_code')}")
        print(f"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {movie.get('summary')}")
        print(f"–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {movie.get('description_full')}")
        print(f"–§–æ–Ω: {movie.get('background_image')}")
        print(f"–ü–æ—Å—Ç–µ—Ä: {movie.get('large_cover_image')}")


        if "torrents" in movie:
            print("\nüì• –¢–æ—Ä—Ä–µ–Ω—Ç—ã:")
            for torrent in movie["torrents"]:
                print(f"  - –ö–∞—á–µ—Å—Ç–≤–æ: {torrent.get('quality')}, –†–∞–∑–º–µ—Ä: {torrent.get('size')}, "
                      f"–°—Å—ã–ª–∫–∞: {torrent.get('url')}")

        print("\n")

else:
    print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ:", data)

